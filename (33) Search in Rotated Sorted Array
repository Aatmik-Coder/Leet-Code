link -- https://leetcode.com/problems/search-in-rotated-sorted-array/


class Solution 
{
    public int search(int[] nums, int target) 
    {
        int pivo = pivot(nums);
        if(pivo == -1)
        {
            return binarySearch(nums, target, 0, nums.length-1);
        }
        if(target == nums[pivo])
        {
            return pivo;
        }
        if(target >= nums[0])
        {
            return binarySearch(nums, target, 0, pivo-1);
        }
        return binarySearch(nums, target, pivo+1, nums.length-1);
    }
    int pivot(int[] nums)
    {
        int start = 0;
        int end = nums.length-1;
        while(start <= end)
        {
            int mid = (start + end) / 2;
            if(mid < end && nums[mid] > nums[mid + 1])
            {
                return mid;
            }
            if(mid > start && nums[mid-1] > nums[mid])
            {
                return mid-1;
            }
            if(nums[mid] <= nums[start])
            {
                end = mid - 1;
            }
            else
            {
                start = mid + 1;
            }
        }
        return -1;
    }
    int binarySearch(int[] nums, int target, int start, int end)
    {
        while(start <= end)
        {
            int mid = (start + end) / 2;
            if(target < nums[mid])
            {
                end = mid - 1;   
            }
            else if(target > nums[mid])
            {
                start = mid + 1;
            }
            else
            {
                return mid;
            }
        }
        return -1;
    }
}
